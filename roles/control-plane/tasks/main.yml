- set_fact:
    arch: "{{ architecture[ansible_architecture|lower] }}"

- name: Create folders
  ansible.builtin.file:
    path: "{{item}}"
    state: directory
    mode: '0700'
    owner: root
    group: root
  loop:
    - "{{ ansible_env.HOME }}/.kube"

- name: Download binaries
  ansible.builtin.get_url:
    url: "https://dl.k8s.io/v{{ kubernetes_version }}/bin/{{ansible_system | lower}}/{{ arch }}/{{item}}"
    dest: "/usr/local/bin/{{item}}"
    mode: '0755'
    force: false
  loop:
   - kube-apiserver
   - kube-controller-manager
   - kube-scheduler
   - kubectl

- set_fact:
    ip_address: "{% if internal_ip is defined and internal_ip != '' %}{{internal_ip}}{% else %}{{ansible_default_ipv4.address}}{% endif %}"

- name: Copy CA certificates
  ansible.builtin.copy:
    src: "/{{tmp_folder}}/{{item.name}}"
    dest: "{{item.path}}"
    mode: '0600'
  loop:
    - {name: ca.crt, path: /etc/kubernetes/pki/ca.crt}
    - {name: ca.key, path: /etc/kubernetes/pki/ca.key}
    - {name: front-proxy-ca.crt, path: /etc/kubernetes/pki/front-proxy-ca.crt}
    - {name: front-proxy-ca.key, path: /etc/kubernetes/pki/front-proxy-ca.key}
    - {name: etcd-ca.crt, path: /etc/kubernetes/pki/etcd-ca.crt}
    - {name: etcd-ca.key, path: /tmp/etcd-ca.key}

- name: Create control plane component keys (1/2)
  ansible.builtin.shell: "openssl genrsa -out {{item.folder}}/{{item.name}}.key 4096"
  args:
    creates: "{{item.folder}}/{{item.name}}.key"
  loop:
    - {name: apiserver-etcd-client, folder: /etc/kubernetes/pki}
    - {name: apiserver, folder: /etc/kubernetes/pki}
    - {name: apiserver-kubelet-client, folder: /etc/kubernetes/pki}
    - {name: front-proxy-client, folder: /etc/kubernetes/pki}
    - {name: sa, folder: /etc/kubernetes/pki}
    - {name: controller-manager, folder: /tmp}
    - {name: scheduler, folder: /tmp}
    - {name: admin, folder: /tmp}

- name: Create all CSR configs
  ansible.builtin.template:
    src: control-plane.conf.j2
    dest: /tmp/control-plane.conf
    mode: '0644'
    owner: root
    group: root

- name: Create all CSR
  ansible.builtin.shell: "openssl req -new -key {{item.path}} -out {{item.section}}.csr -config control-plane.conf -section {{item.section}}"
  args:
    chdir: /tmp
  loop:
    - {path: /etc/kubernetes/pki/apiserver.key, section: kube-api-server}
    - {path: /etc/kubernetes/pki/apiserver-etcd-client.key, section: apiserver-etcd-client}
    - {path: /etc/kubernetes/pki/apiserver-kubelet-client.key, section: apiserver-kubelet-client}
    - {path: /etc/kubernetes/pki/front-proxy-client.key, section: front-proxy-client}
    - {path: /tmp/controller-manager.key, section: kube-controller-manager}
    - {path: /tmp/scheduler.key, section: kube-scheduler}
    - {path: /tmp/admin.key, section: admin}

- name: Create All certificates
  ansible.builtin.shell: "openssl x509 -req -in {{item.csr}} -CA {{item.ca}} -CAkey {{item.cakey}} -copy_extensions copyall -sha256 -CAcreateserial -out {{item.out}} -days 365 && chmod 600 {{item.out}}"
  args:
    chdir: /tmp
  loop:
    - {csr: kube-api-server.csr, ca: /etc/kubernetes/pki/ca.crt, cakey: /etc/kubernetes/pki/ca.key, out: /etc/kubernetes/pki/apiserver.crt}
    - {csr: apiserver-etcd-client.csr, ca: /etc/kubernetes/pki/etcd-ca.crt, cakey: /tmp/etcd-ca.key, out: /etc/kubernetes/pki/apiserver-etcd-client.crt}
    - {csr: apiserver-kubelet-client.csr, ca: /etc/kubernetes/pki/ca.crt, cakey: /etc/kubernetes/pki/ca.key, out: /etc/kubernetes/pki/apiserver-kubelet-client.crt}
    - {csr: kube-controller-manager.csr, ca: /etc/kubernetes/pki/ca.crt, cakey: /etc/kubernetes/pki/ca.key, out: /tmp/controller-manager.crt}
    - {csr: kube-scheduler.csr, ca: /etc/kubernetes/pki/ca.crt, cakey: /etc/kubernetes/pki/ca.key, out: /tmp/scheduler.crt}
    - {csr: admin.csr, ca: /etc/kubernetes/pki/ca.crt, cakey: /etc/kubernetes/pki/ca.key, out: /tmp/admin.crt}
    - {csr: front-proxy-client.csr, ca: /etc/kubernetes/pki/front-proxy-ca.crt, cakey: /etc/kubernetes/pki/front-proxy-ca.key, out: /etc/kubernetes/pki/front-proxy-client.crt}

- name: Create service account public key
  ansible.builtin.shell: |
    openssl rsa -in sa.key -pubout -out sa.pub
    chmod 600 sa.pub
  args:
    chdir: /etc/kubernetes/pki

- name: Generate etcd encryption key
  ansible.builtin.shell: "head -c 32 /dev/urandom | base64"
  register: etcd_encryption_key
  no_log: true

- name: Create etcd encryption config
  ansible.builtin.template:
    src: encryption-config.yaml.j2
    dest: /etc/kubernetes/encryption-at-rest.yaml
    mode: '0600'
    owner: root
    group: root
    force: false

- name: Generate Kubeconfigs (1/4)
  ansible.builtin.shell: "/usr/local/bin/kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/pki/ca.crt --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=/etc/kubernetes/{{item}}.conf"
  loop:
    - controller-manager
    - scheduler
    - admin

- name: Generate Kubeconfigs (2/4)
  ansible.builtin.shell: "/usr/local/bin/kubectl config set-credentials {{item.group}} --client-certificate=/tmp/{{item.name}}.crt --client-key=/tmp/{{item.name}}.key --embed-certs=true --kubeconfig=/etc/kubernetes/{{item.name}}.conf"
  loop:
    - {name: controller-manager, group: system:kube-controller-manager}
    - {name: scheduler, group: system:kube-scheduler}
    - {name: admin, group: admin}

- name: Generate Kubeconfigs (3/4)
  ansible.builtin.shell: "/usr/local/bin/kubectl config set-context default --cluster=kubernetes --user={{item.group}} --kubeconfig=/etc/kubernetes/{{item.name}}.conf"
  loop:
    - {name: controller-manager, group: system:kube-controller-manager}
    - {name: scheduler, group: system:kube-scheduler}
    - {name: admin, group: admin}

- name: Generate Kubeconfigs (4/4)
  ansible.builtin.shell: "/usr/local/bin/kubectl config use-context default --kubeconfig=/etc/kubernetes/{{item}}.conf"
  loop:
    - controller-manager
    - scheduler
    - admin

- name: Move admin kubeconfig
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "{{ansible_env.HOME}}/.kube/config"
    mode: '0644'
    remote_src: true

- name: Create systemd unit file
  ansible.builtin.template:
    src: "{{item}}.service.j2"
    dest: /etc/systemd/system/{{item}}.service
    mode: '0600'
    owner: root
    group: root
  loop:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
  register: cp_systemd

- name: Reload & start service
  ansible.builtin.service:
    name: "{{item}}"
    enabled: true
    state: reloaded
  loop:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
  when: cp_systemd.changed
  ignore_errors: true

- name: Start service
  ansible.builtin.service:
    name: "{{item}}"
    enabled: true
    state: restarted
  loop:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

- name: Copy RBAC
  ansible.builtin.copy:
    src: ./files/rbac.yaml
    dest: /tmp/rbac.yaml
    mode: 0644

- name: Apply RBAC
  ansible.builtin.shell: "/usr/local/bin/kubectl apply -f /tmp/rbac.yaml"
  run_once: true

- name: Install helm
  ansible.builtin.shell: curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  environment:
    PATH: "/usr/local/bin:{{ ansible_env.PATH }}"
  run_once: true

- name: Install coredns
  ansible.builtin.shell: |
    /usr/local/bin/helm repo add coredns https://coredns.github.io/helm
    /usr/local/bin/helm repo update
    /usr/local/bin/helm --namespace=kube-system upgrade --install coredns --version {{coredns_version}} --set service.clusterIP=10.96.0.10 coredns/coredns
  run_once: true

- include_tasks: cleanup.yml
