- set_fact:
    arch: "{{ architecture[ansible_architecture|lower] }}"

- name: Create folders
  ansible.builtin.file:
    path: "{{item}}"
    state: directory
    mode: '0700'
    owner: root
    group: root
  loop:
    - "/var/lib/kubelet"
    - "/var/lib/kube-proxy"
    - "/opt/cni/bin"

- block:
  - include_tasks: pre_requisites.yml
  - include_tasks: cri.yml

  - name: Download worker release
    ansible.builtin.get_url:
      url: "{{ download_url }}/v{{ kubernetes_version }}/kubernetes-node-{{ansible_system | lower}}-{{ arch }}.tar.gz"
      dest: "/tmp"
      force: false
      mode: '0755'

  - name: Untar worker node release
    ansible.builtin.unarchive:
      src: "/tmp/kubernetes-node-{{ansible_system | lower}}-{{ arch }}.tar.gz"
      dest: "/tmp"
      remote_src: true

  - name: Move worker node binaries
    ansible.builtin.copy:
      src: "/tmp/kubernetes/node/bin/{{item}}"
      dest: "/usr/local/bin/{{item}}"
      mode: '0755'
      remote_src: true
    loop:
      - kubelet
      - kube-proxy
      - kubectl
  when: not skip_download | default('false') | bool

- name: Copy CA certificates
  ansible.builtin.copy:
    src: "/tmp/{{item.name}}"
    dest: "{{item.path}}"
    mode: '0600'
  loop:
    - {name: ca.crt, path: /var/lib/kubernetes/ca.crt}
    - {name: ca.key, path: /tmp/ca.key}

- name: Create worker node component keys
  ansible.builtin.shell: "openssl genrsa -out {{item.name}}.key 2048"
  args:
    chdir: /var/lib/{{item.folder}}
    creates: /var/lib/{{item.folder}}/{{item.name}}.key
  loop:
    - {folder: kubelet, name: "{{ansible_hostname}}" }
    - {folder: kube-proxy, name: kube-proxy }

- name: Create worker node certificate csr
  ansible.builtin.shell: "openssl req -new -key /var/lib/{{item.folder}}/{{item.name}}.key -subj \"{{item.subject}}\" -out {{item.name}}.csr"
  args:
    chdir: /tmp
  loop:
    - {folder: kubelet, name: "{{ ansible_hostname }}", subject: '/CN=system:node:{{ ansible_hostname }}/O=system:nodes'}
    - {folder: kube-proxy, name: kube-proxy, subject: '/CN=system:kube-proxy'}

- name: Create worker node certificates
  ansible.builtin.shell: "openssl x509 -req -in {{item.name}}.csr -CA /var/lib/kubernetes/ca.crt -CAkey /tmp/ca.key -out /var/lib/{{item.folder}}/{{item.name}}.crt -extensions v3_req -days 365"
  args:
    chdir: /tmp
  loop:
    - {folder: kubelet, name: "{{ ansible_hostname }}" }
    - {folder: kube-proxy, name: kube-proxy }

- name: Check resolv.conf
  ansible.builtin.stat:
    path: /run/systemd/resolve/resolv.conf
  register: resolvd

- name: Create worker node configs
  ansible.builtin.template:
    src: "{{item.name}}.yaml.j2"
    dest: "/var/lib/{{item.folder}}/{{item.name}}.yaml"
    mode: '0644'
    owner: root
    group: root
  loop:
    - {folder: kubelet, name: kubelet-config}
    - {folder: kube-proxy, name: kube-proxy-config}

- set_fact:
    cp_endpoint: "{{hostvars[groups['control_plane'][0]]['internal_ip']}}"

- name: Generate Kubeconfigs (1/4)
  ansible.builtin.shell: "kubectl config set-cluster kubernetes --certificate-authority=/var/lib/kubernetes/ca.crt --embed-certs=true --server=https://{{cp_endpoint}}:6443 --kubeconfig=/var/lib/{{item.folder}}/{{item.name}}.kubeconfig"
  loop:
    - {folder: kubelet, name: "{{ ansible_hostname }}"}
    - {folder: kube-proxy, name: kube-proxy}

- name: Generate Kubeconfigs (2/4)
  ansible.builtin.shell: "kubectl config set-credentials {{item.group}} --client-certificate=/var/lib/{{item.folder}}/{{item.name}}.crt --client-key=/var/lib/{{item.folder}}/{{item.name}}.key --embed-certs=true --kubeconfig=/var/lib/{{item.folder}}/{{item.name}}.kubeconfig"
  loop:
    - {folder: kubelet, name: "{{ ansible_hostname }}", group: "system:node:{{ ansible_hostname }}"}
    - {folder: kube-proxy, name: kube-proxy, group: system:kube-proxy}

- name: Generate Kubeconfigs (3/4)
  ansible.builtin.shell: "kubectl config set-context default --cluster=kubernetes --user={{item.group}} --kubeconfig=/var/lib/{{item.folder}}/{{item.name}}.kubeconfig"
  loop:
    - {folder: kubelet, name: "{{ ansible_hostname }}", group: "system:node:{{ ansible_hostname }}"}
    - {folder: kube-proxy, name: kube-proxy, group: system:kube-proxy}

- name: Generate Kubeconfigs (4/4)
  ansible.builtin.shell: "kubectl config use-context default --kubeconfig=/var/lib/{{item.folder}}/{{item.name}}.kubeconfig"
  loop:
    - {folder: kubelet, name: "{{ ansible_hostname }}"}
    - {folder: kube-proxy, name: kube-proxy}

- name: Create systemd unit file
  ansible.builtin.template:
    src: "{{item}}.service.j2"
    dest: /etc/systemd/system/{{item}}.service
    mode: '0644'
    owner: root
    group: root
  loop:
    - kubelet
    - kube-proxy
  register: worker_systemd

- name: Reload & start service
  ansible.builtin.service:
    name: "{{item}}"
    enabled: true
    state: reloaded
  loop:
    - kubelet
    - kube-proxy
  when: worker_systemd.changed
  ignore_errors: true

- name: Start service
  ansible.builtin.service:
    name: "{{item}}"
    enabled: true
    state: started
  loop:
    - kubelet
    - kube-proxy

- include_tasks: cni.yml
  when: not skip_download | default('false') | bool

- include_tasks: cleanup.yml
