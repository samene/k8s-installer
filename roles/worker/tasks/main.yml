- set_fact:
    arch: "{{ architecture[ansible_architecture|lower] }}"

- block:
  - include_tasks: pre_requisites.yml
  - include_tasks: cri.yml
  when: "'worker' in group_names"

- block:
  - name: Download worker release
    ansible.builtin.get_url:
      url: "{{ download_url }}/v{{ kubernetes_version }}/kubernetes-node-{{ansible_system | lower}}-{{ arch }}.tar.gz"
      dest: "/tmp"
      force: false
      mode: '0755'

  - name: Untar worker node release
    ansible.builtin.unarchive:
      src: "/tmp/kubernetes-node-{{ansible_system | lower}}-{{ arch }}.tar.gz"
      dest: "/tmp"
      remote_src: true

  - name: Move worker node binaries
    ansible.builtin.copy:
      src: "/tmp/kubernetes/node/bin/{{item}}"
      dest: "/usr/local/bin/{{item}}"
      mode: '0755'
      remote_src: true
    loop:
      - kubelet
      - kubectl
    when: not skip_download | default('false') | bool and "'worker' in group_names"

  - name: Move worker node binaries
    ansible.builtin.copy:
      src: "/tmp/kubernetes/node/bin/{{item}}"
      dest: "/usr/local/bin/{{item}}"
      mode: '0755'
      remote_src: true
    loop:
      - kube-proxy
  when: not skip_download | default('false') | bool

- block:
  - name: Copy worker node binaries
    ansible.builtin.copy:
      src: "/data/kubernetes/{{ kubernetes_version }}/{{ arch }}/{{ item }}"
      dest: "/usr/local/bin/{{item}}"
      mode: '0755'
    loop:
      - kubelet
      - kubectl
  when: skip_download | default('false') | bool and "'worker' in group_names"

- block:
  - name: Copy worker node binaries
    ansible.builtin.copy:
      src: "/data/kubernetes/{{ kubernetes_version }}/{{ arch }}/{{ item }}"
      dest: "/usr/local/bin/{{item}}"
      mode: '0755'
    loop:
      - kube-proxy
  when: skip_download | default('false') | bool

- name: Copy CA certificates
  ansible.builtin.copy:
    src: "/{{tmp_folder}}/{{item.name}}"
    dest: "{{item.path}}"
    mode: '0600'
  loop:
    - {name: ca.crt, path: /etc/kubernetes/pki/ca.crt}
    - {name: ca.key, path: /tmp/ca.key}

- name: Create worker node component keys (kubelet)
  ansible.builtin.shell: "openssl genrsa -out {{ansible_hostname}}.key 4096"
  args:
    chdir: /etc/kubernetes/pki
    creates: "/etc/kubernetes/pki/{{ansible_hostname}}.key"
  when: "'worker' in group_names"

- name: Create worker node component keys (kube-proxy)
  ansible.builtin.shell: "openssl genrsa -out kube-proxy.key 4096"
  args:
    chdir: /etc/kubernetes/pki
    creates: /etc/kubernetes/pki/kube-proxy.key

- name: Create all CSR configs
  ansible.builtin.template:
    src: worker.conf.j2
    dest: /tmp/worker.conf
    mode: '0644'
    owner: root
    group: root

- name: Create worker node certificate csr (kubelet)
  ansible.builtin.shell: "openssl req -new -key /etc/kubernetes/pki/{{ansible_hostname}}.key -out kubelet.csr -config worker.conf -section kubelet"
  args:
    chdir: /tmp
  when: "'worker' in group_names"

- name: Create worker node certificate csr (kube-proxy)
  ansible.builtin.shell: "openssl req -new -key /etc/kubernetes/pki/kube-proxy.key -out kube-proxy.csr -config worker.conf -section kube-proxy"
  args:
    chdir: /tmp

- name: Create worker node certificate (kubelet)
  ansible.builtin.shell: "openssl x509 -req -in kubelet.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /tmp/ca.key -out /etc/kubernetes/pki/{{ansible_hostname}}.crt -copy_extensions copyall -sha256 -CAcreateserial -days 365 && chmod 600 /etc/kubernetes/pki/{{ansible_hostname}}.crt"
  args:
    chdir: /tmp
  when: "'worker' in group_names"

- name: Create worker node certificate (kube-proxy)
  ansible.builtin.shell: "openssl x509 -req -in kube-proxy.csr -CA /etc/kubernetes/pki/ca.crt -CAkey /tmp/ca.key -out /etc/kubernetes/pki/kube-proxy.crt -copy_extensions copyall -sha256 -CAcreateserial -days 365 && chmod 600 /etc/kubernetes/pki/kube-proxy.crt"
  args:
    chdir: /tmp

- name: Check resolv.conf
  ansible.builtin.stat:
    path: /run/systemd/resolve/resolv.conf
  register: resolvd

- name: Create worker node configs
  ansible.builtin.template:
    src: "{{item.name}}.yaml.j2"
    dest: "/etc/kubernetes/{{item.name}}.yaml"
    mode: '0600'
    owner: root
    group: root
  loop:
    - {folder: kubelet, name: kubelet-config}
  when: "'worker' in group_names"

- name: Create worker node configs
  ansible.builtin.template:
    src: "{{item.name}}.yaml.j2"
    dest: "/etc/kubernetes/{{item.name}}.yaml"
    mode: '0600'
    owner: root
    group: root
  loop:
    - {folder: kube-proxy, name: kube-proxy-config}

- set_fact:
    cp_endpoint: "{% if hostvars[groups['control_plane'][0]]['loadbalancer_int_ip'] is defined %}{{hostvars[groups['control_plane'][0]]['loadbalancer_int_ip']}}{% else %}{{hostvars[groups['control_plane'][0]]['internal_ip']}}{% endif %}"

- name: Generate Kubeconfigs (1/4)
  ansible.builtin.shell: "kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/pki/ca.crt --embed-certs=true --server=https://{{cp_endpoint}}:6443 --kubeconfig=/etc/kubernetes/kubelet.conf"
  when: "'worker' in group_names"

- name: Generate Kubeconfigs (1/4)
  ansible.builtin.shell: "kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/pki/ca.crt --embed-certs=true --server=https://{{cp_endpoint}}:6443 --kubeconfig=/etc/kubernetes/kube-proxy.conf"

- name: Generate Kubeconfigs (2/4)
  ansible.builtin.shell: "kubectl config set-credentials system:node:{{ansible_hostname}} --client-certificate=/etc/kubernetes/pki/{{ansible_hostname}}.crt --client-key=/etc/kubernetes/pki/{{ansible_hostname}}.key --embed-certs=true --kubeconfig=/etc/kubernetes/kubelet.conf"
  when: "'worker' in group_names"

- name: Generate Kubeconfigs (2/4)
  ansible.builtin.shell: "kubectl config set-credentials system:kube-proxy --client-certificate=/etc/kubernetes/pki/kube-proxy.crt --client-key=/etc/kubernetes/pki/kube-proxy.key --embed-certs=true --kubeconfig=/etc/kubernetes/kube-proxy.conf"

- name: Generate Kubeconfigs (3/4)
  ansible.builtin.shell: "kubectl config set-context default --cluster=kubernetes --user=system:node:{{ansible_hostname}} --kubeconfig=/etc/kubernetes/kubelet.conf"
  when: "'worker' in group_names"

- name: Generate Kubeconfigs (3/4)
  ansible.builtin.shell: "kubectl config set-context default --cluster=kubernetes --user=system:kube-proxy --kubeconfig=/etc/kubernetes/kube-proxy.conf"

- name: Generate Kubeconfigs (4/4)
  ansible.builtin.shell: "kubectl config use-context default --kubeconfig=/etc/kubernetes/kubelet.conf"
  when: "'worker' in group_names"

- name: Generate Kubeconfigs (4/4)
  ansible.builtin.shell: "kubectl config use-context default --kubeconfig=/etc/kubernetes/kube-proxy.conf"

- name: Create systemd unit file
  ansible.builtin.template:
    src: "kubelet.service.j2"
    dest: /etc/systemd/system/kubelet.service
    mode: '0644'
    owner: root
    group: root
  when: "'worker' in group_names"

- name: Create systemd unit file
  ansible.builtin.template:
    src: "kube-proxy.service.j2"
    dest: /etc/systemd/system/kube-proxy.service
    mode: '0644'
    owner: root
    group: root

- name: Reload & start service
  ansible.builtin.service:
    name: kubelet
    enabled: true
    state: reloaded
  when: "'worker' in group_names"
  ignore_errors: true

- name: Reload & start service
  ansible.builtin.service:
    name: kube-proxy
    enabled: true
    state: reloaded
  ignore_errors: true

- name: Start service
  ansible.builtin.service:
    name: kubelet
    enabled: true
    state: started
  when: "'worker' in group_names"

- name: Start service
  ansible.builtin.service:
    name: kube-proxy
    enabled: true
    state: started

- include_tasks: cleanup.yml
