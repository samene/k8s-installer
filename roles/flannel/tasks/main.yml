- set_fact:
    arch: "{{ architecture[ansible_architecture|lower] }}"
- block:
  - name: Download flanneld
    ansible.builtin.get_url:
      url: "{{ flanneld_download_url }}/v{{flanneld_version}}/flannel-v{{flanneld_version}}-{{ansible_system | lower}}-{{ arch }}.tar.gz"
      dest: "/tmp"
      force: false
      mode: '0755'
  - name: Untar flanneld release
    ansible.builtin.unarchive:
      src: "/tmp/flannel-v{{ flanneld_version }}-{{ansible_system | lower}}-{{ arch }}.tar.gz"
      dest: "/tmp"
      remote_src: true
    register: flannedl_untar
  - name: Move flanneld binary
    ansible.builtin.copy:
      src: "/tmp/flanneld"
      dest: "/usr/local/bin/flanneld"
      mode: '0755'
      remote_src: true

- block:
  - name: Download flannel
    ansible.builtin.get_url:
      url: "{{ flannel_download_url }}/v{{ flannel_version }}/cni-plugin-flannel-{{ansible_system | lower}}-{{ arch }}-v{{ flannel_version }}.tgz"
      dest: "/tmp"
      force: false
      mode: '0755'
  - name: Untar flannel release
    ansible.builtin.unarchive:
      src: "/tmp/cni-plugin-flannel-{{ansible_system | lower}}-{{ arch }}-v{{ flannel_version }}.tgz"
      dest: "/tmp"
      remote_src: true
    register: flannel_untar
  - name: Move flannel binary
    ansible.builtin.copy:
      src: "/tmp/flannel-{{ arch }}"
      dest: "/opt/cni/bin/flannel"
      mode: '0755'
      remote_src: true

- name: Add key in etcd
  shell: "etcdctl --cert=/etc/kubernetes/pki/etcd/server.crt --key=/etc/kubernetes/pki/etcd/server.key --cacert=/etc/kubernetes/pki/etcd/ca.crt --insecure-skip-tls-verify put /coreos.com/network/config '{ \"Network\": \"10.244.0.0/16\", \"Backend\": {\"Type\": \"vxlan\"}}'"
  delegate_to: "{{ groups['etcd'][0] }}"
  run_once: true

- set_fact:
    ip_address: "{% if internal_ip is defined and internal_ip != '' %}{{internal_ip}}{% else %}{{ansible_default_ipv4.address}}{% endif %}"
  delegate_to: "{{ groups['etcd'][0] }}"
  run_once: true

- set_fact:
    etcd_cluster: "{% for host in groups['etcd'] %}https://{{hostvars[host]['ip_address']}}:2379{% if not loop.last %},{% endif %}{% endfor %}"

- name: Create systemd unit file
  ansible.builtin.template:
    src: flanneld.service.j2
    dest: /etc/systemd/system/flanneld.service
    mode: '0644'
    owner: root
    group: root
  register: flanneld_service

- name: Reload & start flanneld etcd
  ansible.builtin.service:
    name: flanneld
    enabled: true
    state: reloaded
  when: flanneld_service.changed
  ignore_errors: true
  no_log: true

- name: Start flanneld
  ansible.builtin.service:
    name: flanneld
    enabled: true
    state: started

- block:

  - name: Configure DNS (1/2)
    lineinfile:
      path: /etc/systemd/resolved.conf
      regexp: '^DNS='
      line: DNS=10.96.0.10 185.12.64.2 185.12.64.1
    register: dns1
  - name: Configure DNS (2/2)
    lineinfile:
      path: /etc/systemd/resolved.conf
      regexp: '^Domains='
      line: Domains=cluster.local
    register: dns2
  - name: Restart service
    shell: "systemctl restart systemd-resolved.service"
    when: dns1.changed or dns2.changed

  when: "'control_plane' in group_names and ansible_os_family == 'Debian'"

- block:

  - name: Get connection UUID
    shell: nmcli -t -f UUID con show --active | head -n 1
    register: uuid
  - name: Configure DNS entry
    shell: "nmcli con mod {{ uuid.stdout }} ipv4.dns \"10.96.0.10 185.12.64.2 185.12.64.1\""
  - name: Restart NetworkManager
    shell: service NetworkManager restart

  when: "'control_plane' in group_names and ansible_os_family == 'RedHat'"

- include_tasks: cleanup.yml
